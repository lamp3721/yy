# 应用主端口（对于非web应用，此配置不起作用，但保留是好习惯）
server:
  port: 8081

# Spring 应用配置
spring:
  application:
    name: Yiyan-Desktop
  profiles:
    active: dev # dev prod
  main:
    banner-mode: "off" # 关闭启动时的 Banner

# 调度器配置
# scheduler:
#  min-delay-seconds: 10 # 最小随机延迟（秒）
#  max-delay-seconds: 30 # 最大随机延迟（秒）

# 日志配置
logging:
  level:
    # 设置根日志级别为 info
    root: info
    # 您可以为特定的包设置不同的级别，例如：
    # com.yiyan: debug
  pattern:
    # 控制台输出格式
    console: "%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{36} - %msg%n"
    # 文件输出格式
    file: "%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{36} - %msg%n"
  file:
    # 日志文件路径和名称
    name: logs/app.log
    # 保留归档日志文件的最大数量
    max-history: 30
    #单个日志文件的最大大小，默认为10MB
    max-size: 10MB

# Resilience4j 熔断器配置
resilience4j:
  circuitbreaker:
    instances:
      # 定义一个可供所有API共享的熔断器实例
      shared-api-breaker:
        register-health-indicator: true # 在 /actuator/health 中显示熔断器状态
        sliding-window-type: count-based # 基于计数的滑动窗口
        sliding-window-size: 10 # 窗口大小为最近10次调用
        failure-rate-threshold: 50 # 失败率阈值：当失败率达到50%时打开断路器
        minimum-number-of-calls: 5 # 最小调用次数：在计算失败率之前，至少需要5次调用
        automatic-transition-from-open-to-half-open-enabled: true # 自动从open过渡到half-open
        wait-duration-in-open-state: 1m # 断路器打开状态持续时间：1分钟
        permitted-number-of-calls-in-half-open-state: 3 # half-open状态下允许的尝试次数
        record-exceptions: # 将这些异常视为失败
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignore-exceptions: [] # 忽略这些异常，不计为失败

# 一言 API 端点配置
yiyan:
  default-user-agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
  max-text-length: 60 # "一言"文本的最大长度，超过则丢弃
  api-list-path: "classpath:api-list.json" # 从独立的JSON文件加载API列表

